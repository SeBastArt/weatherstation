name: WeatherStation-Deployment

on:
  workflow_dispatch:
    inputs:
      baseversion:
        description: 'Image base version'
        required: true
        default: '1.0'

jobs:
  build_things:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: sebastart/thingsapi
      DOCKER_TARGET_PLATFORM: linux/arm64
    outputs:
      version: ${{ steps.prepare.outputs.version }}
      image: ${{ env.DOCKER_IMAGE }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Prepare
        id: prepare
        run: |
          VERSION="v${{ github.event.inputs.baseversion }}.${GITHUB_RUN_NUMBER}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT          
          
      - name: Log into registry docker hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push things docker image
        working-directory: src
        run: |
          docker buildx build . \
            --platform $DOCKER_TARGET_PLATFORM \
            --file ./ThingsApi/Dockerfile \
            --tag ${{ env.DOCKER_IMAGE }}:${{ steps.prepare.outputs.version }} \
            --tag ${{ env.DOCKER_IMAGE }}:latest \
            --output type=image,push=true
          
  build_weatherstation:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: sebastart/weatherstation
      DOCKER_TARGET_PLATFORM: linux/arm64
    outputs:
      version: ${{ steps.prepare.outputs.version }}
      image: ${{ env.DOCKER_IMAGE }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Prepare
        id: prepare
        run: |
          VERSION="v${{ github.event.inputs.baseversion }}.${GITHUB_RUN_NUMBER}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Log into registry docker hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Weatherstation docker image
        working-directory: src
        run: |
          docker buildx build . \
            --platform $DOCKER_TARGET_PLATFORM \
            --file ./Weatherstation/Dockerfile \
            --tag ${{ env.DOCKER_IMAGE }}:${{ steps.prepare.outputs.version }} \
            --tag ${{ env.DOCKER_IMAGE }}:latest \
            --output type=image,push=true
          
  build_backend:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: sebastart/weatherstation-backendapi
      DOCKER_TARGET_PLATFORM: linux/arm64
    outputs:
      version: ${{ steps.prepare.outputs.version }}
      image: ${{ env.DOCKER_IMAGE }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Prepare
        id: prepare
        run: |
          VERSION="v${{ github.event.inputs.baseversion }}.${GITHUB_RUN_NUMBER}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Log into registry docker hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend docker image
        working-directory: src
        run: |
          docker buildx build . \
            --platform $DOCKER_TARGET_PLATFORM \
            --file ./BackendApi/Dockerfile \
            --tag ${{ env.DOCKER_IMAGE }}:${{ steps.prepare.outputs.version }} \
            --tag ${{ env.DOCKER_IMAGE }}:latest \
            --output type=image,push=true
    
  
  deploy:
    needs: [build_things, build_backend, build_weatherstation]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Configure Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          
      - name: Deploy with Helm
        env:
          INFLUXDB_INIT_USERNAME: ${{ secrets.INFLUXDB_INIT_USERNAME }}
          INFLUXDB_INIT_PASSWORD: ${{ secrets.INFLUXDB_INIT_PASSWORD }}
          INFLUXDB_INIT_ADMIN_TOKEN: ${{ secrets.INFLUXDB_INIT_ADMIN_TOKEN }}
        run: |
          chmod 600 /home/runner/.kube/config
          helm upgrade --install weatherstation ./helm/weatherstation \
            --create-namespace \
            --set influxdb.secrets.INFLUXDB_INIT_USERNAME="${{ secrets.INFLUXDB_INIT_USERNAME }}" \
            --set influxdb.secrets.INFLUXDB_INIT_PASSWORD="${{ secrets.INFLUXDB_INIT_PASSWORD }}" \
            --set influxdb.secrets.INFLUXDB_INIT_ADMIN_TOKEN="${{ secrets.INFLUXDB_INIT_ADMIN_TOKEN }}" \
            --set frontend.image=${{ needs.build_weatherstation.outputs.image }}:${{ needs.build_weatherstation.outputs.version }} \
            --set things.image=${{ needs.build_things.outputs.image }}:${{ needs.build_things.outputs.version }} \
            --set backend.image=${{ needs.build_backend.outputs.image }}:${{ needs.build_backend.outputs.version }}
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/frontend -n weatherstation
