name: WeatherStation-Deployment

on:
  workflow_dispatch:
    inputs:
      baseversion:
        description: 'Image base version'
        required: true
        default: '2.0'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.prepare.outputs.version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Prepare Version
        id: prepare
        run: |
          VERSION="v${{ github.event.inputs.baseversion }}.${GITHUB_RUN_NUMBER}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component:
          - name: things
            image: sebastart/thingsapi
            dockerfile: ThingsApi/Dockerfile
            context: src
          - name: frontend
            image: sebastart/frontend
            dockerfile: Frontend/Dockerfile
            context: src
          - name: backend
            image: sebastart/backendapi
            dockerfile: BackendApi/Dockerfile
            context: src
          - name: weather
            image: sebastart/temperature-dashboard
            dockerfile: Dockerfile
            context: src/temperature-dashboard
    env:
      DOCKER_TARGET_PLATFORM: linux/arm64
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master
            network=host

      - name: Log into Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push ${{ matrix.component.name }} image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.component.context }}
          file: ${{ matrix.component.context }}/${{ matrix.component.dockerfile }}
          platforms: ${{ env.DOCKER_TARGET_PLATFORM }}
          push: true
          tags: |
            ${{ matrix.component.image }}:${{ needs.prepare.outputs.version }}
            ${{ matrix.component.image }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  deploy:
    needs: [build, prepare]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
      - name: Configure Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      - name: Deploy with Helm
        env:
          INFLUXDB_INIT_USERNAME: ${{ secrets.INFLUXDB_INIT_USERNAME }}
          INFLUXDB_INIT_PASSWORD: ${{ secrets.INFLUXDB_INIT_PASSWORD }}
          INFLUXDB_INIT_ADMIN_TOKEN: ${{ secrets.INFLUXDB_INIT_ADMIN_TOKEN }}
        run: |
          helm upgrade --install weatherstation ./helm/weatherstation \
            --create-namespace \
            --namespace weatherstation \
            --set influxdb.secrets.INFLUXDB_INIT_USERNAME="${{ secrets.INFLUXDB_INIT_USERNAME }}" \
            --set influxdb.secrets.INFLUXDB_INIT_PASSWORD="${{ secrets.INFLUXDB_INIT_PASSWORD }}" \
            --set influxdb.secrets.INFLUXDB_INIT_ADMIN_TOKEN="${{ secrets.INFLUXDB_INIT_ADMIN_TOKEN }}" \
            --set backend.imageVersion=${{ needs.prepare.outputs.version }} \
            --set frontend.imageVersion=${{ needs.prepare.outputs.version }} \
            --set things.imageVersion=${{ needs.prepare.outputs.version }} \
            --set weather.imageVersion=${{ needs.prepare.outputs.version }}
